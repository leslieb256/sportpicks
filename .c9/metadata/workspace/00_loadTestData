{"filter":false,"title":"00_loadTestData","tooltip":"/00_loadTestData","undoManager":{"mark":2,"position":2,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":35}},"text":"var mongoose = require('mongoose');"},{"action":"insertText","range":{"start":{"row":0,"column":35},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":41,"column":0}},"lines":["var models = require('./models');","var scoring = require('./scoring');","","//helper function","function sortByPoints(a,b){","    if (a.points < b.points) return -1;","    if (a.points > b.points) return 1;","    return 0;","}","","function updateCompetitionPoints(baseFixture,baseCompetition){","    // returns an array of objects to allow the programme to update the scores for the competition","    // during this process it will need to call another function to update the scores for a fixture.","    // base fixture is the fixture where the points needs to be calculated for.","","    // ranking will need to be a function outside this one that calls this one which will need to wrap this","    // there will need to be another function that wraps the one above that updates the db.","    ","    var userPoints; //create an array","    console.log('TEST:%s',baseCompetition.usersAccepted);","    baseCompetition.usersAccepted.forEach(function (user){","        console.log('USER:%s',user);","    });","        //create a user object","        // get the points for the rounds from the points schema (type: round)","            // for each round","                // if round = fixture round:","                    // call round scring function and return the round points","                        // this function will need to call the fixcture scoring function and update the fixutre and update the round points.","                    // call function to return JSON with data for points schema","                // else","                    // points = round pints from query (exiting round points)","                    //add a JSON object: with everythin bar ranking for the point schema","            ","}","","// connect to the database","mongoose.connect('mongodb://golog:gogogadget@kahana.mongohq.com:10061/tippingcomptest');","var db = mongoose.connection;","db.on('error', console.error.bind(console, 'connection error'));"]},{"action":"insertText","range":{"start":{"row":41,"column":0},"end":{"row":41,"column":36}},"text":"db.once('open', function callback(){"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":4,"column":0},"end":{"row":36,"column":0}},"nl":"\n","lines":["//helper function","function sortByPoints(a,b){","    if (a.points < b.points) return -1;","    if (a.points > b.points) return 1;","    return 0;","}","","function updateCompetitionPoints(baseFixture,baseCompetition){","    // returns an array of objects to allow the programme to update the scores for the competition","    // during this process it will need to call another function to update the scores for a fixture.","    // base fixture is the fixture where the points needs to be calculated for.","","    // ranking will need to be a function outside this one that calls this one which will need to wrap this","    // there will need to be another function that wraps the one above that updates the db.","    ","    var userPoints; //create an array","    console.log('TEST:%s',baseCompetition.usersAccepted);","    baseCompetition.usersAccepted.forEach(function (user){","        console.log('USER:%s',user);","    });","        //create a user object","        // get the points for the rounds from the points schema (type: round)","            // for each round","                // if round = fixture round:","                    // call round scring function and return the round points","                        // this function will need to call the fixcture scoring function and update the fixutre and update the round points.","                    // call function to return JSON with data for points schema","                // else","                    // points = round pints from query (exiting round points)","                    //add a JSON object: with everythin bar ranking for the point schema","            ","}"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":4,"column":0},"end":{"row":5,"column":0}},"nl":"\n","lines":[""]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":8,"column":36},"end":{"row":8,"column":36},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1408528178298,"hash":"895f120a94827246d37c3fee5671a604ae2340b8"}